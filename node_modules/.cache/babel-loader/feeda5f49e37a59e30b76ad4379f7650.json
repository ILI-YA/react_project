{"ast":null,"code":"var _jsxFileName = \"/home/iliya/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/<TeachMeSkills>/test_react_project/match-match-game/src/components/pages/Game/components/Field.jsx\";\nimport React from 'react';\nimport Card1 from '../../../common/Card1';\nexport default class Field extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      field: this.generateFields()\n    };\n  }\n\n  generateFields(difficulty = 8) {\n    let valueOfCard = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n    let numberOfFields = difficulty * difficulty;\n    let cardsValues = [];\n    let j = 0;\n\n    for (let i = 0; i < numberOfFields; i = i + 2) {\n      let card = valueOfCard[j];\n      cardsValues.push(card, card);\n\n      if (j === valueOfCard.length - 1) {\n        j = 0;\n      } else {\n        j++;\n      }\n    }\n\n    let k = 0;\n    let fields = [];\n\n    for (let i = 0; i < difficulty; i++) {\n      fields[i] = [];\n\n      for (let j = 0; j < difficulty; j++) {\n        fields[i].push({\n          value: cardsValues[k],\n          flipped: false,\n          matched: false\n        });\n        k++;\n      }\n    }\n\n    return fields;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cards\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, this.state.field.map((row, rowIndex) => row.map((col, colIndex) => /*#__PURE__*/React.createElement(Card1, {\n      row: rowIndex,\n      col: colIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 100\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/home/iliya/Рабочий стол/<TeachMeSkills>/test_react_project/match-match-game/src/components/pages/Game/components/Field.jsx"],"names":["React","Card1","Field","Component","constructor","props","state","field","generateFields","difficulty","valueOfCard","numberOfFields","cardsValues","j","i","card","push","length","k","fields","value","flipped","matched","render","map","row","rowIndex","col","colIndex"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AAIA,eAAe,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAC/CC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,KAAKC,cAAL;AADE,KAAb;AAGH;;AAGDA,EAAAA,cAAc,CAACC,UAAU,GAAG,CAAd,EAAiB;AAC3B,QAAIC,WAAW,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CAAlB;AACA,QAAIC,cAAc,GAAGF,UAAU,GAAGA,UAAlC;AACA,QAAIG,WAAW,GAAG,EAAlB;AACA,QAAIC,CAAC,GAAG,CAAR;;AAEA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGH,cAAjB,EAAiCG,CAAC,GAACA,CAAC,GAAC,CAArC,EAAwC;AACpC,UAAIC,IAAI,GAAGL,WAAW,CAACG,CAAD,CAAtB;AACAD,MAAAA,WAAW,CAACI,IAAZ,CAAiBD,IAAjB,EAAuBA,IAAvB;;AAEA,UAAGF,CAAC,KAAKH,WAAW,CAACO,MAAZ,GAAqB,CAA9B,EAAgC;AAC5BJ,QAAAA,CAAC,GAAG,CAAJ;AACH,OAFD,MAEO;AACHA,QAAAA,CAAC;AACJ;AACJ;;AAID,QAAIK,CAAC,GAAG,CAAR;AACA,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,UAApB,EAAgCK,CAAC,EAAjC,EAAqC;AACjCK,MAAAA,MAAM,CAACL,CAAD,CAAN,GAAY,EAAZ;;AACA,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAApB,EAAgCI,CAAC,EAAjC,EAAqC;AACjCM,QAAAA,MAAM,CAACL,CAAD,CAAN,CAAUE,IAAV,CAAe;AACXI,UAAAA,KAAK,EAAER,WAAW,CAACM,CAAD,CADP;AAEXG,UAAAA,OAAO,EAAE,KAFE;AAGXC,UAAAA,OAAO,EAAE;AAHE,SAAf;AAKAJ,QAAAA,CAAC;AACJ;AACJ;;AACD,WAAOC,MAAP;AACH;;AAIDI,EAAAA,MAAM,GAAE;AACJ,wBACA;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB,KAAKjB,KAAL,CAAWC,KAAX,CAAiBiB,GAAjB,CAAqB,CAACC,GAAD,EAAMC,QAAN,KAAmBD,GAAG,CAACD,GAAJ,CAAQ,CAACG,GAAD,EAAMC,QAAN,kBAAmB,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEF,QAAZ;AAAsB,MAAA,GAAG,EAAEE,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA3B,CAAxC,CAAxB,CADA;AAGH;;AAlD8C","sourcesContent":["import React from 'react'\nimport Card1 from '../../../common/Card1'\n\n\n\nexport default class Field extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            field: this.generateFields()\n        }\n    }\n    \n   \n    generateFields(difficulty = 8) {\n        let valueOfCard = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n        let numberOfFields = difficulty * difficulty\n        let cardsValues = []\n        let j = 0\n    \n        for(let i=0; i < numberOfFields; i=i+2) {\n            let card = valueOfCard[j]\n            cardsValues.push(card, card)\n    \n            if(j === valueOfCard.length - 1){\n                j = 0\n            } else {\n                j++\n            }\n        }\n\n       \n    \n        let k = 0\n        let fields = []\n        for (let i = 0; i < difficulty; i++) {\n            fields[i] = []\n            for (let j = 0; j < difficulty; j++) {\n                fields[i].push({\n                    value: cardsValues[k],\n                    flipped: false,\n                    matched: false\n                })\n                k++\n            }\n        }\n        return fields\n    }\n    \n\n\n    render(){\n        return(\n        <div className='cards'>{this.state.field.map((row, rowIndex) => row.map((col, colIndex) => <Card1 row={rowIndex} col={colIndex} />))}</div>   \n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}