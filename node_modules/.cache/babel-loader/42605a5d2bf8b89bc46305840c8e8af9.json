{"ast":null,"code":"var _jsxFileName = \"/home/iliya/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/<TeachMeSkills>/test_react_project/match-match-game/src/components/pages/Game/components/Timer.jsx\";\nimport React from 'react';\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hour: Math.abs(Math.floor(new Date().setSeconds() / 1000) % 60),\n      minute: \" \",\n      second: \" \",\n      date: new Date()\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick(timeInMilliseconds) {\n    var time = new Date(timeInMilliseconds);\n    var minutes = time.getMinutes().toString();\n    var seconds = time.getSeconds().toString();\n    var milliseconds = time.getMilliseconds().toString().slice(0, 2);\n\n    if (minutes.length < 2) {\n      minutes = '0' + minutes;\n    }\n\n    if (seconds.length < 2) {\n      seconds = '0' + seconds;\n    }\n\n    if (milliseconds.length < 2) {\n      milliseconds = '0' + milliseconds;\n    }\n\n    return minutes + ' : ' + seconds + ' . ' + milliseconds;\n    this.setState({\n      hour: time,\n      minute: minutes,\n      second: seconds,\n      date: new Date()\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, this.state.date.toLocaleTimeString(), this.state.result);\n  }\n\n}","map":{"version":3,"sources":["/home/iliya/Рабочий стол/<TeachMeSkills>/test_react_project/match-match-game/src/components/pages/Game/components/Timer.jsx"],"names":["React","Timer","Component","constructor","props","state","hour","Math","abs","floor","Date","setSeconds","minute","second","date","componentDidMount","timerID","setInterval","tick","componentWillUnmount","clearInterval","timeInMilliseconds","time","minutes","getMinutes","toString","seconds","getSeconds","milliseconds","getMilliseconds","slice","length","setState","render","toLocaleTimeString","result"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,eAAe,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAC/CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAW,IAAIC,IAAJ,GAAWC,UAAX,KAAwB,IAAnC,IAAyC,EAAlD,CADG;AAETC,MAAAA,MAAM,EAAE,GAFC;AAGTC,MAAAA,MAAM,EAAE,GAHC;AAITC,MAAAA,IAAI,EAAE,IAAIJ,IAAJ;AAJG,KAAb;AAMD;;AAEDK,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,OAAL,GAAeC,WAAW,CACxB,MAAM,KAAKC,IAAL,EADkB,EAExB,IAFwB,CAA1B;AAID;;AAEDC,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKJ,OAAN,CAAb;AACD;;AAEDE,EAAAA,IAAI,CAACG,kBAAD,EAAqB;AACrB,QAAIC,IAAI,GAAG,IAAIZ,IAAJ,CAASW,kBAAT,CAAX;AACA,QAAIE,OAAO,GAAGD,IAAI,CAACE,UAAL,GAAkBC,QAAlB,EAAd;AACA,QAAIC,OAAO,GAAGJ,IAAI,CAACK,UAAL,GAAkBF,QAAlB,EAAd;AACA,QAAIG,YAAY,GAAGN,IAAI,CAACO,eAAL,GAAuBJ,QAAvB,GAAkCK,KAAlC,CAAwC,CAAxC,EAA2C,CAA3C,CAAnB;;AAEA,QAAIP,OAAO,CAACQ,MAAR,GAAiB,CAArB,EAAwB;AAAER,MAAAA,OAAO,GAAG,MAAMA,OAAhB;AAA0B;;AACpD,QAAIG,OAAO,CAACK,MAAR,GAAiB,CAArB,EAAwB;AAAEL,MAAAA,OAAO,GAAG,MAAMA,OAAhB;AAA0B;;AACpD,QAAIE,YAAY,CAACG,MAAb,GAAsB,CAA1B,EAA6B;AAAEH,MAAAA,YAAY,GAAG,MAAMA,YAArB;AAAoC;;AAEnE,WAAOL,OAAO,GAAG,KAAV,GAAkBG,OAAlB,GAA4B,KAA5B,GAAoCE,YAA3C;AAEA,SAAKI,QAAL,CAAc;AACV1B,MAAAA,IAAI,EAAEgB,IADI;AAEVV,MAAAA,MAAM,EAAEW,OAFE;AAGVV,MAAAA,MAAM,EAAEa,OAHE;AAIVZ,MAAAA,IAAI,EAAE,IAAIJ,IAAJ;AAJI,KAAd;AAMH;;AAEDuB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK5B,KAAL,CAAWS,IAAX,CAAgBoB,kBAAhB,EADH,EAEG,KAAK7B,KAAL,CAAW8B,MAFd,CADF;AAMD;;AAjD8C","sourcesContent":["import React from 'react'\n\n\nexport default class Timer extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          hour: Math.abs(Math.floor(new Date().setSeconds()/1000)%60),\n          minute: \" \",\n          second: \" \",\n          date: new Date()\n        };\n    }\n  \n    componentDidMount() {\n      this.timerID = setInterval(\n        () => this.tick(),\n        1000\n      );\n    }\n  \n    componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n  \n    tick(timeInMilliseconds) {\n        var time = new Date(timeInMilliseconds);\n        var minutes = time.getMinutes().toString();\n        var seconds = time.getSeconds().toString();\n        var milliseconds = time.getMilliseconds().toString().slice(0, 2);\n      \n        if (minutes.length < 2) { minutes = '0' + minutes; }\n        if (seconds.length < 2) { seconds = '0' + seconds; }\n        if (milliseconds.length < 2) { milliseconds = '0' + milliseconds; }\n      \n        return minutes + ' : ' + seconds + ' . ' + milliseconds;\n        \n        this.setState({\n            hour: time,\n            minute: minutes,\n            second: seconds,\n            date: new Date()\n      });\n    }\n  \n    render() {\n      return (\n        <div>\n          {this.state.date.toLocaleTimeString()}\n          {this.state.result}\n        </div>\n      );\n    }\n  }"]},"metadata":{},"sourceType":"module"}